generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  karma          Int?      @default(0)
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  emailVerified  DateTime?
  image          String?
  places         Place[]   @relation("UserPlaces")
  reviews        Review[]
  accounts       Account[]
  sessions       Session[]
  favoritePlaces Place[]   @relation("UserFavoritePlaces")

  @@map("users")
}

model Review {
  id        String   @id @default(cuid())
  content   String
  rating    Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  userId    String
  placeId   String
  images    String[]
  place     Place    @relation(fields: [placeId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Place {
  id          String   @id @default(cuid())
  name        String
  address     String
  attributes  String[]
  rating      Float
  description String
  longitude   Float
  latitude    Float
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  ownerId     String
  verified    Boolean
  images      String[]
  owner       User     @relation("UserPlaces", fields: [ownerId], references: [id], onDelete: Cascade) // Existing relation for places created by the user
  reviews     Review[]
  favoritedBy User[]   @relation("UserFavoritePlaces")
}
